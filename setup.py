from glob import glob
import imp
import os
import subprocess
from setuptools import setup, find_packages
from setuptools.extension import Extension
import sys
import time


MAJOR = 3
MINOR = 0
REVISION = 0


def git_hash():
    commit = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).decode().strip()
    return commit


def git_revision():
    revision = subprocess.check_output(['git', 'rev-list', '--count', 'HEAD']).decode().strip()
    return int(revision)


version_module = '''"""
taiyaki/version.py
This file was generated by setup.py at: {time}
"""

__version__ = "{version}"
major = {major}
minor = {minor}
revision = {revision}
git_revision = {git_revision}
git_hash = "{git_hash}"
'''


def write_version(fn="taiyaki/version.py"):
    # The git revision may be incorrect if the source tree is not fully checked out
    GIT_REVISION = git_revision()
    GIT_HASH = git_hash()

    version = "{}.{}.{}+{}".format(MAJOR, MINOR, REVISION, GIT_HASH)

    with open(fn, 'w') as f:
        f.write(version_module.format(time=time.strftime("%a, %d %b %Y %H:%M:%S GMT%z", time.localtime()),
                                      version=version, major=MAJOR, minor=MINOR,
                                      revision=REVISION, git_revision=GIT_REVISION, git_hash=GIT_HASH))


THIS_DIR = os.path.dirname(os.path.abspath(__file__))
if os.path.exists(os.path.join(THIS_DIR, ".git")):
    # If this is a git repo, write the version. Otherwise assume we are installing from a wheel
    write_version()


taiyaki_version = imp.load_source("version", "taiyaki/version.py")
version = taiyaki_version.__version__


try:
    root_dir = os.environ['ROOT_DIR']
except KeyError:
    root_dir = '.'


install_requires = [
    "h5py >= 2.2.1",
    "numpy >= 1.9.0",
    "biopython >= 1.63",
    "Cython >= 0.25.2",
]


#  Build extensions
try:
    import numpy as np
    from Cython.Build import cythonize
    extensions = cythonize([
        Extension("taiyaki.squiggle_match.squiggle_match",
                  [os.path.join("taiyaki/squiggle_match", "squiggle_match.pyx"),
                   os.path.join("taiyaki/squiggle_match", "c_squiggle_match.c")],
                  include_dirs=[np.get_include()],
                  extra_compile_args=["-O3", "-fopenmp", "-std=c99", "-march=native"],
                  extra_link_args=["-fopenmp"]),
        Extension("taiyaki.ctc.ctc", [os.path.join("taiyaki/ctc", "ctc.pyx"),
                                      os.path.join("taiyaki/ctc", "c_crf_flipflop.c")],
                  include_dirs=[np.get_include()],
                  extra_compile_args=["-O3", "-fopenmp", "-std=c99", "-march=native"],
                  extra_link_args=["-fopenmp"])
    ])
except ImportError:
    extensions = []
    sys.stderr.write("WARNING: Numpy and Cython are required to build taiyaki extensions\n")
    if any([cmd in sys.argv for cmd in ["install", "build", "build_clib", "build_ext", "bdist_wheel"]]):
        raise


setup(
    name='taiyaki',
    version=version,
    description='Neural network model training for Nanopore base calling',
    maintainer='Tim Massingham',
    maintainer_email='tim.massingham@nanoporetech.com',
    url='http://www.nanoporetech.com',
    long_description="""Taiyaki is a library to support training and developing new base calling models
for Oxford Nanopore Technologies' sequencing platforms.""",

    classifiers=[
        'Development Status :: 3 - Alpha',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'Intended Audience :: Science/Research',
        'Natural Language :: English',
        'Operating System :: Unix',
        'Programming Language :: Python :: 3 :: Only',
        'Topic :: Scientific/Engineering :: Artificial Intelligence',
        'Topic :: Scientific/Engineering :: Bio-Informatics',
        'Topic :: Scientific/Engineering :: Mathematics'
    ],

    packages=find_packages(exclude=["*.test", "*.test.*", "test.*", "test", "bin"]),
    package_data={'configs': 'data/configs/*'},
    exclude_package_data={'': ['*.hdf', '*.c', '*.h']},
    ext_modules=extensions,
    setup_requires=["pytest-runner", "pytest-xdist"],
    tests_require=["parameterized", "pytest"],
    install_requires=install_requires,
    dependency_links=[],
    zip_safe=False,
    scripts=[x for x in glob('bin/*.py')],

)
